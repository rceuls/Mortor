@page "/reports"
@using Mortor.Web.Data
@using System.Security.Claims
@attribute [Authorize]

@inject MortorBlazorContext MortorBlazorContext;
@inject DialogService DialogService
@inject NavigationManager NavigationManager;
@inject FileService FileService;
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .app-fab--absolute {
        position: fixed;
        bottom: 1rem;
        right: 1rem;
    }
</style>

<RadzenGrid @ref="_reportGrid"
            AllowFiltering="true" 
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
            FilterMode="FilterMode.Advanced" 
            AllowPaging="true" 
            PageSize="5"
            AllowSorting="true" 
            Data="@_reports"
            TItem="Report">
    <Columns>
        <RadzenGridColumn TItem="Report" Property="CreatedBy" Title="Created By" Width="20rem" />
        <RadzenGridColumn TItem="Report" Property="TargetDate" Title="Created On" Width="20rem">
            <Template Context="data">
                @($"{data.TargetDate:d}")
            </Template>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="Report" Title="Actions" Width="10rem">
            <Template Context="data">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Click=@(() => OnViewReport(data.Id)) />
                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click=@(() => OnDeleteReport(data)) />
            </Template>
        </RadzenGridColumn>
    </Columns>
</RadzenGrid>

<RadzenButton Click="@OnAddReport" 
              Text="Add Report" 
              Class="app-fab--absolute" />

@code {
    private IEnumerable<Report> _reports;
    private RadzenGrid<Report> _reportGrid;

    protected override void OnInitialized()
    {
        _reports = MortorBlazorContext.Reports;
    }

    private void OnViewReport(Guid reportId)
    {
        NavigationManager.NavigateTo($"/reports/{reportId}");
    }

    private async Task OnDeleteReport(Report toRemove)
    {
        var res = await DialogService.Confirm("Are you sure you want to delete this report?");
        if (res ?? false)
        {
            MortorBlazorContext.Reports.Remove(toRemove);
            await MortorBlazorContext.SaveChangesAsync();
            FileService.RemoveAllImagesFromReport(toRemove.Id.ToString());
            await _reportGrid.Reload();
        }
    }

    private async Task OnAddReport()
    {
        var report = new Report()
        {
            CreatedBy = await GetCreatedBy(),
            TargetDate = DateTime.Today
        };
        await _reportGrid.InsertRow(report);
        await MortorBlazorContext.Reports.AddAsync(report);
        await MortorBlazorContext.SaveChangesAsync();
    }

    private async Task<string> GetCreatedBy()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        return state.User.Claims.FirstOrDefault(x => x.Type == "name")?.Value ?? string.Empty;
    }

}
